#include <Arduino.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// SSID and Password
const char *ssid = "donsky-4thFloor";
const char *password = "donsky982";

/**** NEED TO CHANGE THIS ACCORDING TO YOUR SETUP *****/
// The REST API endpoint - Change the IP Address
const char *base_rest_url = "http://192.168.100.22:5000/";

WiFiClient client;
HTTPClient http;

unsigned long previousMillis = 0;
const long readInterval = 10000;

struct LED
{
  const char *sensor_id;
  const char *description;
  const char *location;
  bool enabled;
  const char *type;
  const char *desc1;
  const char *desc2;
  const char *desc3;
  const char *status;
};

struct RELAY
{
  boolean enabled;
  char *description;
  boolean in1;
  boolean in2;
  boolean in3;
  boolean in4;
};

StaticJsonDocument<384> callHTTPGet(const char *sensor_id)
{
  char rest_api_url[200];
  // Calling our API server
  sprintf(rest_api_url, "%sapi/sensors?sensor_id=%s", base_rest_url, sensor_id);
  Serial.println(rest_api_url);

  http.useHTTP10(true);
  http.begin(client, rest_api_url);
  http.addHeader("Content-Type", "application/json");
  http.GET();

  // Parse response
  StaticJsonDocument<384> doc;

  DeserializationError error = deserializeJson(doc, http.getStream());

  if (error)
  {
    Serial.print("deserializeJson() failed: ");
    Serial.println(error.c_str());
    return doc;
  }

  http.end();
  return doc;
}

const LED extractLEDConfiguration(const char *sensor_id)
{
  StaticJsonDocument<384> doc = callHTTPGet(sensor_id);
  if (doc.isNull() || doc.size() > 1)
    return {}; // or LED{}
  for (JsonObject item : doc.as<JsonArray>())
  {
    Serial.println("Start iteration...");

    const char *sensor_id = item["sensor_id"];     // "led_1"
    const char *description = item["description"]; // "This is our LED"
    const char *location = item["location"];       // "Inside the bedroom"
    bool enabled = item["enabled"];                // true
    const char *type = item["type"];               // "toggle"
    const char *status = item["status"];           // "HIGH"
    const char *desc1 = item["desc1"];             // "HIGH"

    Serial.println("Extract....");
    Serial.println(status);
    Serial.println(strlen(status));
    // char dest[] = {status};
    LED temp;
    temp.sensor_id = sensor_id;
    temp.description = description;
    temp.location = location;
    temp.enabled = enabled;
    temp.type = type;
    // strcpy(dest, status);
    temp.status = status;
    temp.desc1 = desc1;
    temp.desc2 = "desc2";
    temp.desc3 = "desc3";
    // Serial.print("Destination Array Size ::");
    // Serial.println(sizeof(dest));
    // Serial.println(strlen(dest));

    Serial.println("DESC 1");
    Serial.println(temp.desc1);

    // return {sensor_id, description, location, enabled, type, value}; // or LED{sensor_id, description, location, enabled, statusValue, type}
    return temp;
  }
  return {}; // or LED{}
}

void setup()
{
  Serial.begin(9600);
  for (uint8_t t = 2; t > 0; t--)
  {
    Serial.printf("[SETUP] WAIT %d...\n", t);
    Serial.flush();
    delay(1000);
  }

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  // callHTTPGet("led_1");
}

void loop()
{
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= readInterval)
  {
    // save the last time
    previousMillis = currentMillis;

    const LED ledSetup = extractLEDConfiguration("led_1");
    Serial.println(ledSetup.sensor_id);
    Serial.println(ledSetup.description);
    Serial.println(ledSetup.location);
    Serial.println(ledSetup.enabled);
    // Serial.println(ledSetup.status);
    Serial.println(ledSetup.type);

    // int result = strcmp(ledSetup.desc1, "HIGH");
    // Serial.print("COMPARE:: ");
    // Serial.println(result);
    Serial.println(ledSetup.desc1);
    Serial.println(ledSetup.desc2);
    Serial.println(ledSetup.status);
    Serial.println(ledSetup.desc3);

    // Serial.println("---------------");
    // auto relayConfiguration = do_something<RELAY>("relay_1");
    // Serial.println(relayConfiguration.description);
    // Serial.println(relayConfiguration.in1);
    // Serial.println(relayConfiguration.in2);
    // Serial.println(relayConfiguration.in3);
    // Serial.println(relayConfiguration.in4);
  }
}
